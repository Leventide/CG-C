{
  "version": 3,
  "sources": ["../../three/examples/jsm/geometries/ParametricGeometry.js", "../../three/examples/jsm/geometries/ParametricGeometries.js"],
  "sourcesContent": ["/**\n * Parametric Surfaces Geometry\n * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n */\n\nimport {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tVector3\n} from 'three';\n\nclass ParametricGeometry extends BufferGeometry {\n\n\tconstructor( func = ( u, v, target ) => target.set( u, v, Math.cos( u ) * Math.sin( v ) ), slices = 8, stacks = 8 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ParametricGeometry';\n\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tconst EPS = 0.00001;\n\n\t\tconst normal = new Vector3();\n\n\t\tconst p0 = new Vector3(), p1 = new Vector3();\n\t\tconst pu = new Vector3(), pv = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tconst sliceCount = slices + 1;\n\n\t\tfor ( let i = 0; i <= stacks; i ++ ) {\n\n\t\t\tconst v = i / stacks;\n\n\t\t\tfor ( let j = 0; j <= slices; j ++ ) {\n\n\t\t\t\tconst u = j / slices;\n\n\t\t\t\t// vertex\n\n\t\t\t\tfunc( u, v, p0 );\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\n\n\t\t\t\t// normal\n\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif ( u - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u - EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u + EPS, v, p1 );\n\t\t\t\t\tpu.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( v - EPS >= 0 ) {\n\n\t\t\t\t\tfunc( u, v - EPS, p1 );\n\t\t\t\t\tpv.subVectors( p0, p1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfunc( u, v + EPS, p1 );\n\t\t\t\t\tpv.subVectors( p1, p0 );\n\n\t\t\t\t}\n\n\t\t\t\t// cross product of tangent vectors returns surface normal\n\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u, v );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let i = 0; i < stacks; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < slices; j ++ ) {\n\n\t\t\t\tconst a = i * sliceCount + j;\n\t\t\t\tconst b = i * sliceCount + j + 1;\n\t\t\t\tconst c = ( i + 1 ) * sliceCount + j + 1;\n\t\t\t\tconst d = ( i + 1 ) * sliceCount + j;\n\n\t\t\t\t// faces one and two\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { ParametricGeometry };\n", "import {\n\tCurve,\n\tVector3\n} from 'three';\n\nimport { ParametricGeometry } from './ParametricGeometry.js';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n\n\tklein: function ( v, u, target ) {\n\n\t\tu *= Math.PI;\n\t\tv *= 2 * Math.PI;\n\n\t\tu = u * 2;\n\t\tlet x, z;\n\t\tif ( u < Math.PI ) {\n\n\t\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( u ) * Math.cos( v );\n\t\t\tz = - 8 * Math.sin( u ) - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( u ) * Math.cos( v );\n\n\t\t} else {\n\n\t\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( v + Math.PI );\n\t\t\tz = - 8 * Math.sin( u );\n\n\t\t}\n\n\t\tconst y = - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( v );\n\n\t\ttarget.set( x, y, z );\n\n\t},\n\n\tplane: function ( width, height ) {\n\n\t\treturn function ( u, v, target ) {\n\n\t\t\tconst x = u * width;\n\t\t\tconst y = 0;\n\t\t\tconst z = v * height;\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t};\n\n\t},\n\n\tmobius: function ( u, t, target ) {\n\n\t\t// flat mobius strip\n\t\t// http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n\t\tu = u - 0.5;\n\t\tconst v = 2 * Math.PI * t;\n\n\t\tconst a = 2;\n\n\t\tconst x = Math.cos( v ) * ( a + u * Math.cos( v / 2 ) );\n\t\tconst y = Math.sin( v ) * ( a + u * Math.cos( v / 2 ) );\n\t\tconst z = u * Math.sin( v / 2 );\n\n\t\ttarget.set( x, y, z );\n\n\t},\n\n\tmobius3d: function ( u, t, target ) {\n\n\t\t// volumetric mobius strip\n\n\t\tu *= Math.PI;\n\t\tt *= 2 * Math.PI;\n\n\t\tu = u * 2;\n\t\tconst phi = u / 2;\n\t\tconst major = 2.25, a = 0.125, b = 0.65;\n\n\t\tlet x = a * Math.cos( t ) * Math.cos( phi ) - b * Math.sin( t ) * Math.sin( phi );\n\t\tconst z = a * Math.cos( t ) * Math.sin( phi ) + b * Math.sin( t ) * Math.cos( phi );\n\t\tconst y = ( major + x ) * Math.sin( u );\n\t\tx = ( major + x ) * Math.cos( u );\n\n\t\ttarget.set( x, y, z );\n\n\t}\n\n};\n\n\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = class TubeGeometry extends ParametricGeometry {\n\n\tconstructor( path, segments = 64, radius = 1, segmentsRadius = 8, closed = false ) {\n\n\t\tconst numpoints = segments + 1;\n\n\t\tconst frames = path.computeFrenetFrames( segments, closed ),\n\t\t\ttangents = frames.tangents,\n\t\t\tnormals = frames.normals,\n\t\t\tbinormals = frames.binormals;\n\n\t\tconst position = new Vector3();\n\n\t\tfunction ParametricTube( u, v, target ) {\n\n\t\t\tv *= 2 * Math.PI;\n\n\t\t\tconst i = Math.floor( u * ( numpoints - 1 ) );\n\n\t\t\tpath.getPointAt( u, position );\n\n\t\t\tconst normal = normals[ i ];\n\t\t\tconst binormal = binormals[ i ];\n\n\t\t\tconst cx = - radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tconst cy = radius * Math.sin( v );\n\n\t\t\tposition.x += cx * normal.x + cy * binormal.x;\n\t\t\tposition.y += cx * normal.y + cy * binormal.y;\n\t\t\tposition.z += cx * normal.z + cy * binormal.z;\n\n\t\t\ttarget.copy( position );\n\n\t\t}\n\n\t\tsuper( ParametricTube, segments, segmentsRadius );\n\n\t\t// proxy internals\n\n\t\tthis.tangents = tangents;\n\t\tthis.normals = normals;\n\t\tthis.binormals = binormals;\n\n\t\tthis.path = path;\n\t\tthis.segments = segments;\n\t\tthis.radius = radius;\n\t\tthis.segmentsRadius = segmentsRadius;\n\t\tthis.closed = closed;\n\n\t}\n\n};\n\n\n/*********************************************\n  *\n  * Parametric Replacement for TorusKnotGeometry\n  *\n  *********************************************/\nParametricGeometries.TorusKnotGeometry = class TorusKnotGeometry extends ParametricGeometries.TubeGeometry {\n\n\tconstructor( radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3 ) {\n\n\t\tclass TorusKnotCurve extends Curve {\n\n\t\t\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\t\t\tconst point = optionalTarget;\n\n\t\t\t\tt *= Math.PI * 2;\n\n\t\t\t\tconst r = 0.5;\n\n\t\t\t\tconst x = ( 1 + r * Math.cos( q * t ) ) * Math.cos( p * t );\n\t\t\t\tconst y = ( 1 + r * Math.cos( q * t ) ) * Math.sin( p * t );\n\t\t\t\tconst z = r * Math.sin( q * t );\n\n\t\t\t\treturn point.set( x, y, z ).multiplyScalar( radius );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst segments = segmentsT;\n\t\tconst radiusSegments = segmentsR;\n\t\tconst extrudePath = new TorusKnotCurve();\n\n\t\tsuper( extrudePath, segments, tube, radiusSegments, true, false );\n\n\t\tthis.radius = radius;\n\t\tthis.tube = tube;\n\t\tthis.segmentsT = segmentsT;\n\t\tthis.segmentsR = segmentsR;\n\t\tthis.p = p;\n\t\tthis.q = q;\n\n\t}\n\n};\n\n/*********************************************\n  *\n  * Parametric Replacement for SphereGeometry\n  *\n  *********************************************/\nParametricGeometries.SphereGeometry = class SphereGeometry extends ParametricGeometry {\n\n\tconstructor( size, u, v ) {\n\n\t\tfunction sphere( u, v, target ) {\n\n\t\t\tu *= Math.PI;\n\t\t\tv *= 2 * Math.PI;\n\n\t\t\tconst x = size * Math.sin( u ) * Math.cos( v );\n\t\t\tconst y = size * Math.sin( u ) * Math.sin( v );\n\t\t\tconst z = size * Math.cos( u );\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t}\n\n\t\tsuper( sphere, u, v );\n\n\t}\n\n};\n\n\n/*********************************************\n  *\n  * Parametric Replacement for PlaneGeometry\n  *\n  *********************************************/\n\nParametricGeometries.PlaneGeometry = class PlaneGeometry extends ParametricGeometry {\n\n\tconstructor( width, depth, segmentsWidth, segmentsDepth ) {\n\n\t\tfunction plane( u, v, target ) {\n\n\t\t\tconst x = u * width;\n\t\t\tconst y = 0;\n\t\t\tconst z = v * depth;\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t}\n\n\t\tsuper( plane, segmentsWidth, segmentsDepth );\n\n\t}\n\n};\n\nexport { ParametricGeometries };\n"],
  "mappings": "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",
  "names": ["u", "v"]
}
